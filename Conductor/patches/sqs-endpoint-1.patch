--- Conductor/conductor/awssqs-event-queue/src/main/java/com/netflix/conductor/sqs/config/SQSEventQueueConfiguration.java	2023-01-26 21:44:09
+++ Conductor/conductor/awssqs-event-queue/src/main/java/com/netflix/conductor/sqs/config/SQSEventQueueConfiguration-updated.java	2023-02-09 11:32:21
@@ -16,6 +16,9 @@
 import java.util.Map;
 
 import org.apache.commons.lang3.StringUtils;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
 import org.springframework.boot.context.properties.EnableConfigurationProperties;
@@ -29,6 +32,8 @@
 import com.netflix.conductor.sqs.eventqueue.SQSObservableQueue.Builder;
 
 import com.amazonaws.auth.AWSCredentialsProvider;
+import com.amazonaws.auth.DefaultAWSCredentialsProviderChain;
+import com.amazonaws.client.builder.AwsClientBuilder;
 import com.amazonaws.services.sqs.AmazonSQS;
 import com.amazonaws.services.sqs.AmazonSQSClientBuilder;
 import rx.Scheduler;
@@ -38,10 +43,26 @@
 @ConditionalOnProperty(name = "conductor.event-queues.sqs.enabled", havingValue = "true")
 public class SQSEventQueueConfiguration {
 
+    @Autowired private SQSEventQueueProperties sqsProperties;
+
+    private static final Logger LOGGER = LoggerFactory.getLogger(SQSEventQueueConfiguration.class);
+
+    @Bean
+    AWSCredentialsProvider createAWSCredentialsProvider() {
+        return new DefaultAWSCredentialsProviderChain();
+    }
+
     @ConditionalOnMissingBean
     @Bean
     public AmazonSQS getSQSClient(AWSCredentialsProvider credentialsProvider) {
-        return AmazonSQSClientBuilder.standard().withCredentials(credentialsProvider).build();
+        AmazonSQSClientBuilder builder =
+                AmazonSQSClientBuilder.standard().withCredentials(credentialsProvider);
+        if (!sqsProperties.getEndpoint().isEmpty()) {
+            LOGGER.info("Setting custom SQS endpoint to {}", sqsProperties.getEndpoint());
+            builder.withEndpointConfiguration(
+                    new AwsClientBuilder.EndpointConfiguration(sqsProperties.getEndpoint(), null));
+        }
+        return builder.build();
     }
 
     @Bean
