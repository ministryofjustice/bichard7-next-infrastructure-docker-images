input {
  cloudwatch_logs {
    codec => multiline {
      pattern => "^%{DATESTAMP} \[%{DATA:source}\] "
      negate => true
      what => "previous"
      max_lines => 1000
    }
    log_group => ["cjse-bichard7-{{ getv "/cjse/environment" ""}}-base-infra-bichard7"]
    start_position => "end"
    region => "eu-west-2"
    tags => ["cloudwatch_syslog","bichard","ecs_logs", "application"]
  }
}

filter {
  mutate{
      replace => [ 'message', '%{message}' ]
      gsub => [ 'message','\n','']
  }

  json {
      skip_on_invalid_json => true
      source => 'message'
      tag_on_failure => ['_jsonparsefailure']
    }

  grok {
    patterns_dir => ["/etc/logstash/patterns"]
    match => { 'message' => [
      '%{JSON:obj_1}%{JSON:obj_2}%{GREEDYDATA:message}',
      '%{DATESTAMP:datestamp} \[%{DATA:source}\] %{LOGLEVEL:loglevel} %{GREEDYDATA:message}',
      '%{LOGLEVEL:loglevel} %{NOTSPACE:source} %{NOTSPACE:instance_ip} - ${WORD:code}: %{GREEDYDATA:stacktrace}\[%{GREEDYDATA:message}',
      '%{LOGLEVEL:loglevel}%{SPACE}\] %{CODE:code}: %{GREEDYDATA:message}',
      '%{LOGLEVEL:loglevel}%{SPACE}\] %{DATA:code}: %{GREEDYDATA:message}'
    ] }
    }
  }

output {
  opensearch {
    hosts => ["{{ getv "/cjse/logstash/es/domain" "http://elasticsearch:9200"}}"]
    index => "{{ getv "/cjse/environment" ""}}-logs-%{+YYYY.MM.dd}"
    user => "{{ getv "/cjse/logstash/es/username" ""}}"
    password => "{{ getv "/cjse/logstash/es/password" ""}}"
    ssl => true
{{ if exists "/cjse/logstash/local" }}
   ssl_certificate_verification => false
{{ end }}
  }
}
